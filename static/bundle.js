!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(o,s,function(t){return e[t]}.bind(null,s));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),s=n(2);!function(){let e=null;function t(e,t){return("00"+e).substr(-(t=t||2))}function n(){const e=new Date;return`${e.getUTCFullYear()}-${t(e.getUTCMonth()+1)}-${t(e.getUTCDate())}T${t(e.getUTCHours())}:${t(e.getUTCMinutes())}:${t(e.getUTCSeconds())}.${t(e.getUTCMilliseconds(),3)}Z`}window.main=function(){e=new s.CommandConnection("/control")},window.ping=function(){const t={type:o.RequestType.LifeCycle,action:o.LifeCycleAction.ping,requestTime:n()};e.request(t,(e,t)=>{e&&console.error(e)})}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.LifeCycle=1]="LifeCycle",e[e.LocoSpeed=2]="LocoSpeed"}(t.RequestType||(t.RequestType={})),function(e){e[e.ping=0]="ping",e[e.shutdown=1]="shutdown"}(t.LifeCycleAction||(t.LifeCycleAction={}))},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Opening=0]="Opening",e[e.Idle=1]="Idle",e[e.Busy=2]="Busy",e[e.Closed=3]="Closed",e[e.Errored=4]="Errored"}(o=t.ConnectionState||(t.ConnectionState={}));class s{constructor(e){this.url=e,this._callback=null,this._state=o.Opening,this._socket=new WebSocket(s.relativeUri(e)),this._socket.onopen=e=>this.onOpen(e),this._socket.onmessage=e=>this.onMessage(e),this._socket.onclose=e=>this.onClose(e),this._socket.onerror=e=>this.onError(e)}static relativeUri(e){const t=window.location;let n;return n="https:"===t.protocol?"wss:":"ws:",n+="//"+t.host,"/"!==e[0]&&(n+=t.pathname),n+=e,n}get state(){return this._state}get isIdle(){return this.state===o.Idle}_setState(e){this._state=e}request(e,t){try{if(!this.isIdle)throw new Error("Request already in progress");return this._setState(o.Busy),this._socket.send(JSON.stringify(e)),this._callback=t,this._callback}catch(e){return t(e),null}}onOpen(e){console.log("WebSocket opened"),this._setState(o.Idle)}onClose(e){console.log("WebSocket clossed");const t=this.state;this._setState(o.Closed);const n=this._callback;this._callback=null,t===o.Busy&&n&&n(new Error("Connection closed"))}onError(e){console.error("WebSocket error");const t=this.state;this._setState(o.Errored);const n=this._callback;this._callback=null,t===o.Busy&&n&&n(new Error("WebSocket error encountered"))}onMessage(e){if(console.log(`WebSocket message received: ${e.data}`),this.state===o.Busy){this._setState(o.Idle);const t=this._callback;this._callback=null,t&&t(null,JSON.parse(e.data))}}}t.CommandConnection=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,